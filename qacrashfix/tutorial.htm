<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html><head><meta http-equiv="Content-Type" content="text/html; charset=GBK">
    <link rel="stylesheet" type="text/css" href="./index_files/style.css">
    <title>QACrashFix</title>
<body bgcolor="#eeeeee" border="1"cellpadding="5"cellspacing="0"width="100%">

<div id="container">
	<div id="header">
		<h1>QACrashFix</h1>
	</div> <!-- end header -->

<div id="sidebar">
 <div id="sidebar2"> 
  <ul>
   <li> <a href="./home.htm">About</a>
   </li><li> <a href="./home.htm#Download">Download</a>
   </li><li> <a href="./tutorial.htm">Tutorial</a> 
   </li><li> <a href="./home.htm#Publication">Publication</a>
   </li><li> <a href="./home.htm#Contributors">Contributors</a>
  </li>
  <li> <a href="./home.htm#References">References</a>
  </li><li> <a href="./examples.htm">Examples</a>
  </li></ul>
 </div>
</div>

<div id="main">


<a name="Tutorial"></a>

<div id="tutorial">
<a name="Installation"><h3>Installation</h3></a>

<p>
QACrashFix depends on maven to download needed jar files. We recommend building QACrashFix by using Eclipse.
</p>

<a name="Usage"><h3>Usage</h3></a>

<dl><li>Compiling the target project</li></dl>

<p>Before running our tool, make sure the target project with a crash bug compiles successfully. Otherwise correct patches will be filtered out because of compilation errors.</p>

<p>The target project should be put into the directory <i>runtime-cache/projects</i>. There are 4 additional files to be added for the project. The structure of the project directory is shown as follows:
</p>

<code><pre>
    runtime-cache
    |_projects
    | |_A : author ID
    |   |_B : project name
    |     |_N : bug number
    |       |_**** : All files under the project root directory
    |       |_exception.trace : the text containing the crash trace in the issue
    |       |_.keywords : keywords generated by <i>KeyWordsGenerator.java</i> of our tool
    |       |_stackoverflow : Stack Overflow pages extracted by using the keywords
    |       |_compile.command : the command and directory to use for compiling
</pre></code>

<p>To replicate the experiment described in <a href="./home.htm#Publication">our paper</a>, for each issue, download the version before the human-written fix is applied from the issue web site: https://github.com/A/B/issues/N. Then put all the files under the project root directory into the folder <i>runtime-cache/projects/A/B/N</i>. To compile these projects, the following steps are needed:</p>

<ol>
	<li>Install ant, maven and gradle. In our experiment we used ant-1.8.0, maven-3.2.3, and gradle-1.10.</li>
	<li>Install Android SDK, and download needed versions of SDK platforms. We recommend downloading all versions.</li>
	<li>Change the Android SDK path to yours in all files of <i>local.properties</i> of each issue.</li>
	<li>For each issue, in the command line, change working directory indicated by the 2nd line in <i>compile.command</i>, and then use the command indicated by the 1st line in <i>compile.command</i> for compiling. This is only to test whether compiling is successful. In our tool we perform this step automatically.</li>
</ol>

<dl><li>Running our tool</li></dl>
<p>To run our tool, run the Main method in <i>Manager.java</i>. The statistics is written to <i>runtime-cache/experiment.statistics</i>. The patches are in the directory <i>.fixes</i>.</p>


<div id="wapper">  
    HTML style inspired from <a href="http://www.cs.cornell.edu/projects/crystal/fastcheck/">Fastcheck</a>
    <div id="main-content">  
    </div>  
    <!-- Ò³½Å -->  
    <div id="footer">  
    </div>  
</div>  
</body></html>